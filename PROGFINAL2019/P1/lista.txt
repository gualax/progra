
/*

/// LISTA ////////////////////////////////////////////////////


typedef int tInfoL;

typedef struct sNodoL
{
    tInfoL info;
    struct sNodoL *sig;

}tNodoL;


typedef tNodoL *tLista;


*/




//// la lista funciona masomenos como la cola dinamica solo solo que no hay prioridad de salida, la puedo recorrer
////  |__|---->  |__|-> |__|-> |__|->
////  pLista     nodo   nodo    nodo



void crearLista(tLista *p)
{

    *p == NULL;
}

int listaVacia(tLista *p)
{
    return *p == NULL;
}


int listaLlena(tLista *p)
{
    tNodoL *aux;

    aux = (tNodoL *)malloc(sizeof(tNodoL));

    if(aux == NULL ) return 0;

    free(aux);

    return 1;

}


int insertarAlPrincipioLista(tLista *p, tInfoL *d)
{
    tNodoL *nue;                             // creo un nuevo nodo

    nue = (tNodoL *)malloc(sizeof(tNodoL));   // reservo memoria para ese nodo

    if(nue == NULL) return 0;               // si no pude reservar salgo


    nue->info = *d;                         //  en nue info pongo el dato
    nue->sig = *p;                         // en nue sig pongo lo que apunta la lista

    *p = nue;                          // finalmente hago que la lista apunte al nuevo nodo

    return 1;

}


int insertarAlFinal(tLista *p, tInfoL *d)
{
  

    while(*p)
    {
        p = &(*p)->sig;                     // me voy corriendo hasta el final una vez encontrado el final
    
    }

      *p = (tNodoL *)malloc(sizeof(tNodoL)); // genero un nuevo nodo
      (*p)->info = *d;                       // le cargo la info
      (*p)->sig = NULL;                     // hago que sig apunte al final por que es el ultimo elemento
    return 1;
}

void vaciarLista(tLista *p)
{
 tNodo *aux;


 while(*p)              // mientras halla algo en la lista
 {
     aux = *p;         // cargo a aux con lo que hay en lista
     *p= aux->sig;            // y pongo a la lista a apuntar al siguiente de aux
     free(aux);
 }

}

void recorrerLista(tLista *p)
{
    while(*p)
    {
        //mostrar
        p = &(*p)->sig;
    }
}


int insertarEnOrden(tLista *p,const tInfoL *d, int (* comparar)(const tInfoL *a, const tInfoL *b))
{

    tNodo *nue;

    nue = (tNodoL *)malloc(sizeof(tNodoL));

    if(nue == NULL ) return 0;


    while(*p && comparar(*d, &(*p)->info)>0)
    {
         p=&(*p)->sig;

    }

        nue->info = *d;

        nue->sig = *p;

        *p=nue;

    return 1;

}


int comparar (const int *a, const int *b)
{

    return *a - *b;
}

////////////////// Eliminar un elemento ///////////////
int eliminarUnelementoDeLaLista(tLista *pl,int elemn, int (*compararXnroReg)(tInfo *,int))
{

tNodoL *aux;
while(*pl)
{
aux = *pl;

    if(compararXnroReg(&(*pl)->info,elemn) == 0)
    {
        printf("\n Encontre el elemento");
        *pl = (*pl)->sig;
        free(aux);
    }
  pl = &(*pl)->sig;

}
return 1;
}


////////////// ordenar ////////////////////////////////////////////////
No funciona pero masomenos es asi
void ordenarLista(tLista *pl, int (* comparar)(tInfo *, tInfo *))
{
    int marca = 1;

    if(*pl)
    {
        while(marca)
        {
            tLista *q = pl;
            marca = 0;

            while((*pl)->sig)
            {
                printf("\n while");
                if(comparar(&(*q)->info,&(*pl)->sig->info) >0 )
                {
                    tNodoL *act = *q;
                    tNodoL *sig = act->sig;
                    tNodoL *sigsig = sig->sig;

                    marca = 1;
                    *q = sig;
                    act->sig = sig->sig;
                    sig->sig = act;

                }
              q = &(*q)->sig;

            }
        }

    }

}

///  TAMPOCO ANDA //////////////////////

int eliminarUnicosDeUnaListaNoOrdenada(tLista *pl, int (* comparar)(tInfo *, tInfo *))
{
    tLista *q =pl;
    int veces, count = 0;

    while(*q)
    {
        tNodoL *aux = *pl;
        veces = 2;

        while(veces && aux)
        {
            if(comparar(&aux->info, &(*pl)->info) == 0)
            {
                veces --;
                aux = aux ->sig;

            }
            if(veces == 1)
            {
                aux = *q;
                *q =aux->sig;
                count ++;
                free(aux);
            }
            q = &(*q)->sig;
        }
    }
    return count;
}


///// sacar primero de lista ///////////////////

int sacarPrimerElementoDeLista(tLista *pl, tInfo *d){
tNodo *aux;
aux = (tNodo *)malloc(sizeof(tNodo));
if(!aux) return 0;
aux = *pl; // igualo aux a la lista
*d = aux->info; //pongo el dato
*pl = aux->sig; // apunto la lista al siguiente de la misma
free(aux;)      // libero la memoria
return 1;

}


// solo borra la primer ocurrencia (sin duplicados, lista no ordenada)
int sacarElementoDeLista(tLista *p, tInfo *d, int (* comp)(const tInfo *, const tInfo *))
{
tNodo *pelim;
if(!*p) return 0;

while(*p && comp(d,&(*p)->info)!=0){ //mientras sea diferente de 0 sigo buscando
    p = &(*p)->sig;  //recorrer lista
}
pelim = *p;
*d = pelim->info; // por si quiero sacar la info de la lista para usarla
*p = pelim->sig; //ensamblo la lista apunto al siguienete del que elimino asi lo salteo
free(pelim);
return 1;
}



// solo borra la primer ocurrencia (sin duplicados, lista  ordenada)
int sacarElementoDeLista2(tLista *p, tInfo *d, int (* comp)(const tInfo *, const tInfo *))
{
tNodo *pelim;
int cmp = 1;
while(*p && (cmp = comp(d,&(*p)->info))>0){ //mientras sea diferente mayor a 0 sigo buscando
    p = &(*p)->sig;  //recorrer lista
}
if(!*p || cmp) return 0;
pelim = *p;
*d = pelim->info; // por si quiero sacar la info de la lista para usarla
*p = pelim->sig; //ensamblo la lista apunto al siguienete del que elimino asi lo salteo
free(pelim);
return 1;
}

// no valida duplicados
int insertarElementoEnListaOrdenado(tLista *p,const tInfo *d, int (* comp)(const tInfo *, const tInfo *))
{
tNodo *nue;
int cmp = 1;

while(*p && (cmp = comp(d,&(*p)->info))> 0 ){ // comparo para insertar
    p = &(*p)->sig;
}
nue = (tNodo *)malloc(sizeof(tNodo));
if(!nue) return 0;
nue->info = *d;
nue->sig = *p;
*p = nue;

return 1;
}

//valida duplicados
int insertarElementoEnListaOrdenadaSinDuplicados(tLista *p,const tInfo *d, int (* comp)(const tInfo *, const tInfo *))
{
tNodo *nue;
int cmp = 1;

while(*p && (cmp = comp(d,&(*p)->info))> 0 ){ // comparo para insertar
    p = &(*p)->sig;
}
if(*p && !cmp) return 0; //validacion de duplicados
nue = (tNodo *)malloc(sizeof(tNodo)); //pido memoria aca por si sale antes y no puedo devolver la memoria
if(!nue) return 0;
nue->info = *d;
nue->sig = *p;
*p = nue;

return 1;
}


// inserta un elemento en la lista y si es duplicado actualiza la informacion de ese elemento
int insertarElementoEnListaOrdenadaYActualizar(tLista *p,const tInfo *d,
                                               int (* comp)(const tInfo *, const tInfo *),
                                               int (* actu)(tInfo *, const tInfo *))
{
tNodo *nue;
int cmp = 1;

while(*p && (cmp = comp(d,&(*p)->info))> 0 ){ // comparo para insertar
    p = &(*p)->sig;
}
if(*p && !cmp) {
    actu(&(*p)->info,d);
    return 1;
}
nue = (tNodo *)malloc(sizeof(tNodo)); //pido memoria aca por si sale antes y no puedo devolver la memoria
if(!nue) return 0;
nue->info = *d;
nue->sig = *p;
*p = nue;

return 1;
}








// buscar el menor intercambiar y avanzar, el total de la lista -1 o hasta que el sig sea null
//void ordenar_lista_x_seleccion(tLista *pl, int (* buscar_menor)(const tInfo *, const tInfo *)){
//tNodo * nodo;
//tLista * menor;
//if(!pl) return 0;
//
//while((*pl)->sig) //hasta que el sig sea null
//{
//        menor = buscar_menor(&pl, comp);// buscar_menor devuelve un tLista
//        if(pl!= menor)
//            mover_nodos(&pl,menor);
//        pl = &(*pl)->sig;
//}
//
//}
//
//
//tLista buscar_menor_lista(const tLista *pl,int (* comp)(const tInfo *, const tInfo *))
//{
// tLista *men = pl;
// if(*pl){
//
//    pl = &(*pl)->sig;
//
//    while(*pl){
//        if(comp(&(*men)->info,&(*pl)->info))
//            men = pl;
//
//        pl = &(*pl)->sig;
//    }
//return (tLista *) men;
// }

//}

void mover_nodo_a_pri(tLista *n1, tLista *n2)
{
 tNodo *mov = *n2;
 //sacar
 *n2 = mov->sig;
 //poner pri
 mov->sig = *n1;
 *n1 = mov;
}



int buscar_elemento(tLista *pl, tInfo *d,int (*comp)(const tInfo *,const tInfo *)){

if(!*pl) return 0;

while(*pl)
{
    if(comp(&(*pl)->info,d) == 0)
    {
        printf("\n Lo encontre ");
        mostrarInfo(&(*pl)->info);
        return 1;
    }
    pl = &(*pl)->sig;  //avanzo
}

return 0;
}


// INSERTAR 5 ELEMENTOS EN LISTA! ORDENA DE MENEOR A MAYOR

int insertarElementoEnListaOrdenadoHasta5elementos(tLista *p,const tInfo *d, int (* comp)(const tInfo *, const tInfo *))
{
tNodo *nue;
int cmp = 1;
int cont = 0;

while(*p && (cmp = comp(d,&(*p)->info)> 0) && cont < 5 ){ // comparo para insertar
    p = &(*p)->sig;
    cont ++;
}
if(cont == 5){
    return 0;
}

nue = (tNodo *)malloc(sizeof(tNodo));
if(!nue) return 0;
nue->info = *d;
nue->sig = *p;
*p = nue;

while(*p && cont < 5){
cont ++;
 p = &(*p)->sig;
}
if(*p){
    free(*p);
    *p == NULL;
}


return 1;
}



// ORDENAR LISTA CONSTA DE LAS SIGUIENTES 3 FUNCIONES /////////


void intercambiar_nodos(t_nodo ** ppn1, t_nodo ** ppn2){
    t_nodo * pn1, * pn2, * psig, * paux;

    if((*ppn2)->psig == *ppn1){
        //POR LAS DUDAS QUE SEAN ADYACENTES Y ADEMAS ESTEN APUNTANDO AL REVES
        paux = *ppn1;
        *ppn1 = *ppn2;
        *ppn2 = paux;
    }
    if((*ppn1)->psig == *ppn2){
        //GUARDO EN VARIABLES AUXILIARS LAS DIRECCIONES
        //SOLO ENTRO ACA CUANDO SEAN ADYACENTES
        pn1 = *ppn1;
        pn2 = *ppn2;
        psig = pn2->psig;

        //EMPIEZO..
        *ppn1 = pn2;
        *ppn2 = psig;
        pn2->psig = pn1;
    }else{
        //ENTRO POR ESTE ELSE CUANDO NO SEAN ADYACENTES
        paux = (*ppn1)->psig;
        (*ppn1)->psig = (*ppn2)->psig;
        (*ppn2)->psig = paux;

        paux = *ppn1;
        *ppn1 = *ppn2;
        *ppn2 = paux;
    }
}

void ordenar_lista(t_lista * plista, t_cmp cmp){
    t_nodo ** pi, ** pmenor;

    if(*plista == NULL)
        return;
    pi = plista;
    while((*pi)->psig){
        pmenor = buscar_menor(pi, cmp);
        if(*pi != *pmenor)
            intercambiar_nodos(pi, pmenor);
        pi = &(*pi)->psig;
    }
}

t_nodo ** buscar_menor(t_lista * plista, t_cmp cmp){
    t_nodo ** pmenor = plista;
    t_nodo ** pact = &(*plista)->psig;
    while(*pact){
        if(cmp(&(*pact)->info, &(*pmenor)->info) < 0)
            pmenor = pact;
        pact = &(*pact)->psig;
    }
    return pmenor;
}
